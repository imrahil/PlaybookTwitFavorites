<?xml version="1.0" encoding="utf-8"?>
<s:ViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
                            splashScreenImage="@Embed('PlaybookTwitFavorites-splash.png')" title="Initializing..."
                            creationComplete="checkSO()">

    <fx:Script>
        <![CDATA[
        import com.destroytoday.twitteraspirin.vo.OAuthTokenVO;
        import com.destroytoday.twitteraspirin.vo.StatusVO;
        import com.destroytoday.twitteraspirin.vo.UserVO;
        import com.imrahil.mobile.twitfav.services.TwitterService;
        import com.imrahil.mobile.twitfav.views.BrowserView;
        import com.imrahil.mobile.twitfav.views.FavoritesView;
        import com.imrahil.mobile.twitfav.views.StartView;

        import mx.events.FlexEvent;

        import net.digitalprimates.collections.VectorListCollection;

        private var twitterService:TwitterService;

        public function startService():void
        {
            twitterService.start();
        }

        private function checkSO():void
        {
            initTwitterService();

            var so:SharedObject = SharedObject.getLocal("playbookTwitFavorites");

            var token:Object = so.data["accessToken"];

            if (token != null)
            {
                // user has already an AccessToken
                twitterService.reqVO = new OAuthTokenVO(token.key, token.secret);
                verifyAccessToken();
            }
            else
            {
                navigator.pushView(StartView);
            }
        }

        private function initTwitterService():void
        {
            twitterService = new TwitterService();

            twitterService.consumerKey = "LLYKzha5RemTVqxVXXAtQ";
            twitterService.consumerSecret = "2EGbBn5mNcITqw5sr6yzHPZH8X1yBQacqxfeAkklO3E";
            twitterService.applicationName = "PlaybookTwitFavorites";

            twitterService.failure.add(onTwitterError);
            twitterService.loginURLReady.add(initStageView);
            twitterService.accessTokenReceived.add(onAccessTokenReceived);
            twitterService.accessTokenFailed.add(onAccessTokenFailed);
            twitterService.verifyOAuthAccessTokenSuccess.add(onVerifyOAuthAccessTokenSuccess);
            twitterService.favoritesTweets.add(onFavoritesTweets);
            twitterService.unFavoritedTweet.add(onUnfavoritedTweet);

            twitterService.init();
        }

        private function onTwitterError(errMessage:*):void
        {
            trace("onTwitterError: " + errMessage);
        }

        public function initStageView():void
        {
            trace('initStageView');
            navigator.pushView(BrowserView, twitterService.loginURL);
        }

        public function authorizeAccessToken(pin:String):void
        {
            trace('authorizeAccessToken');
            twitterService.getAccessToken(pin);
        }

        private function onAccessTokenReceived():void
        {
            trace('onAccessTokenReceived');
            verifyAccessToken();
        }

        private function onAccessTokenFailed():void
        {
            trace('onAccessTokenFailed');
            navigator.popView();

            initTwitterService();
            startService();
        }

        private function verifyAccessToken():void
        {
            trace('verifyAccessToken');
            twitterService.verifyOAuthAccessToken();
        }

        private function onVerifyOAuthAccessTokenSuccess(user:UserVO):void
        {
            trace('onVerifyOAuthAccessTokenSuccess');
            var so:SharedObject = SharedObject.getLocal("playbookTwitFavorites");
            so.data["accessToken"] = twitterService.reqVO;
            so.flush();

            navigator.popAll();

            navigator.pushView(FavoritesView);

            getFavorites();
        }

        public function getFavorites():void
        {
            twitterService.getFavorites();
        }

        private function onFavoritesTweets(favoritesTimeline:Vector.<StatusVO>):void
        {
            trace('onFavoritesTweets');

            (navigator.activeView as FavoritesView).data = new VectorListCollection(favoritesTimeline);
        }

        public function unFavoriteTweet(status:StatusVO):void
        {
            trace('unfavoriteTweet');

            twitterService.unFavoriteTweet(status);
        }

        private function onUnfavoritedTweet(status:StatusVO):void
        {
            trace('onUnfavoritesTweet');

            var currentView:FavoritesView = navigator.activeView as FavoritesView;
            currentView.busyInd.visible = false;

            var collection:VectorListCollection = currentView.data as VectorListCollection;
            for each (var item:StatusVO in collection)
            {
                if (item.id == status.id)
                {
                    collection.removeItemAt(collection.getItemIndex(item));
                    break;
                }
            }
        }

        public function logoutClickHandler():void
        {
            trace('SharedObject deleted!');
            var so:SharedObject = SharedObject.getLocal("playbookTwitFavorites");
            so.data["accessToken"] = null;
            so.flush();

            navigator.popAll();
            navigator.pushView(StartView);

            initTwitterService();
        }
        ]]>
    </fx:Script>

    <fx:Style>
        @namespace s "library://ns.adobe.com/flex/spark";
        @namespace controls "com.imrahil.mobile.twitfav.components.*";

        s|ActionBar {
            fontSize: 26;
        }
        s|ActionBar #titleDisplay
        {
            fontSize: 26;
        }

        controls|SkinnableAlert {
            skinClass: ClassReference("com.imrahil.mobile.twitfav.components.SkinnableAlertSkin");
            backgroundColor: #424242;
            backgroundAlpha: 0.9;
        }

        controls|SkinnableAlert s|TextArea {
            contentBackgroundAlpha: 0;
        }

        controls|SkinnableAlert s|Button {
            fontSize: 28;
        }
    </fx:Style>
</s:ViewNavigatorApplication>
